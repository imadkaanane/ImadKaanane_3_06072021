// Flexbox

@mixin flex($direction, $justify, $align) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
}


// Grid system

@mixin grid {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    column-gap: 2rem;
    row-gap: 2rem;

    @include tablet {
        grid-template-columns: repeat(2, 1fr);
      }
    @include desktop {
        grid-template-columns: repeat(3, 1fr);
    } 
}

// Alignement , positon.....

@mixin position ($pos, $top, $left){
  position: $pos;
  top: $top;
  left: $left; 
}

@mixin position-right ($pos, $top, $right) {
  position: $pos;
  top: $top;
  right: $right; 
}

@mixin text-center {
  text-align: center;
  justify-content: center;
}

// Fonts, decoration texte

@mixin font-family($font) {
  font-family: $font ;
}
@mixin font-size($size: 25px) {
  font-size: $size;
}

@mixin font-weight($weight: bold) {
  font-weight: $weight;
}


// Largeurs,  longueurs
@mixin block($width, $height) {
  width: $width;
  height: $height;
}

// Borders
@mixin border($radius, $shadow, $transition) {
  @if $radius == 0 and $shadow == $shadow and $transition == $transition{
    box-shadow: $shadow;
    transition-duration: $transition;
  } @else if $radius == $borderButton and $shadow == $shadow and $transition == $transition {
      border-radius: $borderButton;
      box-shadow: $shadow;
      transition-duration: $transition;
  } @else if $radius ==  $borderStep and $shadow == $shadow and $transition == $transition {
      border-radius: $borderStep;
      box-shadow: $shadow;
      transition-duration: $transition;
  } @else if $radius ==  $borderNumber and $shadow == 0 and $transition == 0 {
      border-radius: $borderNumber;
  } @else if $radius ==  $borderCard and $shadow == $shadow and $transition == $transition{
      border-radius: $borderCard;
      box-shadow: $shadow;
      transition-duration: $transition;
  } @else if $radius ==  $borderImg and $shadow == 0 and $transition == 0{
      border-radius: $borderImg;
  } @else if $radius ==  $borderTag and $shadow == 0 and $transition == 0{
      border-radius: $borderTag;
  } @else if $radius ==  $borderMenu and $shadow == 0 and $transition == 0{
      border-radius: $borderMenu;
  } @else if $radius ==  $borderMenuItem and $shadow == $shadow and $transition == $transition{
      border-radius: $borderMenuItem;
      box-shadow: $shadow;
      transition-duration: $transition;
  } @else if $radius ==  $borderWrapIcon and $shadow == 0 and $transition == 0{
      border-radius: $borderWrapIcon;
  }
}


// Shadow


@mixin box-shadow-hover {
  transform: scale(1.04);
  box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.75);
  transition-duration: .75s;
}

// Background
 @mixin background($color) {
   background-color: $color;
 }

 @mixin buttonPrimary {
  background-color: $bgButton;
  background-image: $bgLinear;
}

//
@mixin back-gradient-clip {
  -webkit-background-clip: text;
  -ms-background-clip: text;
  background-clip: text;
  color: $transp;
}

@mixin ellipsis {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

// Animations
@mixin animation($anim, $dur) {
  @if $anim == loader and $dur == .3s {
    animation: $anim $dur;
    animation-delay: 2s;
    animation-fill-mode: both;
  } @else if $anim == bounce and $dur == .75s{
    animation: $anim $dur;
    animation-iteration-count: 3;
  } @else if $anim == arise and $dur == .6s {
    animation: $anim $dur;
    opacity: 1;
    transform: scale(1.05);
  } @else if $anim == menuAppear and $dur == 1.75s {
    animation: $anim $dur;
    animation-timing-function: cubic-bezier(.5,1.58,.34,.82);
    animation-fill-mode: both;
    overflow: hidden;
    cursor: pointer;
  }
}

// Media Queries

@mixin tablet {
    @media screen and (min-width:map-get($breakpoints, tablet)){
      @content;
    }
  }
  @mixin desktop {
    @media screen and (min-width:map-get($breakpoints, desktop)){
      @content;
    }
  }
  @mixin large {
    @media screen and (min-width:map-get($breakpoints, large)){
      @content;
    }
  }
  
  @mixin medium {
    @media screen and (min-width: map-get($breakpoints, medium)) {
      @content;
    }
  }


