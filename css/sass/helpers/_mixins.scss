// Media Queries

@mixin tablet {
  @media screen and (min-width:map-get($breakpoints, tablet)){
    @content;
  }
}
@mixin desktop {
  @media screen and (min-width:map-get($breakpoints, desktop)){
    @content;
  }
}
@mixin large {
  @media screen and (min-width:map-get($breakpoints, large)){
    @content;
  }
}

@mixin medium {
  @media screen and (min-width: map-get($breakpoints, medium)) {
    @content;
  }
}



// Colors, Background
@mixin color($colors){
  color: $colors;
}

@mixin background($colorBg) {
  background-color: $colorBg;
}

@mixin buttonPrimary {
 background-color: $bgButton;
 background-image: $bgLinear;
}

// Flexbox

@mixin flex($direction, $justify, $align) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}


// Grid system

@mixin grid ($i, $column, $row, $iTab, $iDesk){
  display: grid;
  grid-template-columns: repeat($i, 1fr);
  column-gap: $column;
  row-gap: $row;

  @include tablet {
      grid-template-columns: repeat($iTab, 1fr);
    }
  @include desktop {
      grid-template-columns: repeat($iDesk, 1fr);
  } 
}

// Alignement , positon.....

@mixin position ($pos, $top, $left){
position: $pos;
top: $top;
left: $left; 
}

@mixin position-right ($pos, $top, $right) {
position: $pos;
top: $top;
right: $right; 
}

@mixin text-center {
text-align: center;
justify-content: center;
}

// Fonts, decoration texte, ajustement....

@mixin font-family($font) {
  font-family: $font ;
}
@mixin font-size($size: 25px) {
  font-size: $size;
}

@mixin font-weight($weight: bold) {
  font-weight: $weight;
}

@mixin text-hover {
  @include font-weight;
  transition-duration: $transition-hover;
}

@mixin back-gradient-clip {
  -webkit-background-clip: text;
  -ms-background-clip: text;
  color: $transp;
}

@mixin ellipsis {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}


// Largeurs,  longueurs, marges....
@mixin block($width, $height) {
  @if $width == 100%  and ($height == 520px or $height == 320px or $height == 195px ) {
    width: $width;
    max-height: $height;
    min-height: $height;
  } @else if ($width == $widthContainer or $width == 100%) and $height == auto{
    max-width: $width;
    height: $height;
  } @else {
    width: $width;
    height: $height;
  }
}

@mixin margin-padding ($mt, $mr, $mb, $ml, $pt, $pr, $pb, $pl) {
  @if ($mr == -$margin or $mr == $margin) and $mt == 0 and $ml == 0 and $mb == 0 and $pt == 0 and $pr == 0 and $pb == 0 and $pl == 0{
    margin-right: $mr;
  } @else {
      margin: $mt $mr $mb $ml;
      padding: $pt $pr $pb $pl;
  }
}

// Borders-radius, box-shadow, transition....
@mixin transform($property) {
  transform: $property;
}

@mixin border-radius-shadow($radius, $x, $y, $blur, $color, $transition) {
  @if $radius == 0 and $x == $x and $y == $y and $blur == $blur and $color == $color {
    box-shadow: $x $y $blur $color;

  } @else if ($radius == nth($border, 1) or $radius ==  nth($border, 2) or $radius ==  nth($border, 4) or $radius ==  nth($border, 8)) and $x == $x and $y == $y and $blur == $blur and $color == $color and $transition == $transition {
      border-radius: $radius;
      box-shadow: $x $y $blur $color;
      transition-duration: $transition;

  } @else if $radius ==  nth($border, 3) or  $radius ==  nth($border, 5) or $radius == nth($border, 6) or $radius ==  nth($border, 7){
      border-radius: $radius;

  } @else if $radius ==  nth($border, 1) and $transition == $transition-hover  {
      border-radius: $borderWrapIcon;
      transition-duration: $transition-hover;
  }
}

@mixin box-shadow-hover($x, $y, $blur, $color-hover, $transition-hover) {
  box-shadow: $x $y $blur $color-hover;
  @include transform(scale(1.04));
  transition-duration: $transition-hover;
}


// Animations
@mixin animation($anim, $dur) {
  @if $anim == loader and $dur == .15s {
    animation: $anim $dur;
    animation-delay: 2.25s;
    animation-fill-mode: both;
  } @else if $anim == bounce and $dur == .6s{
    @keyframes bounce {
      0% {
        @include transform (translateY(0));
      }
      25% {
        @include transform (translateY(24px));
      }
      75% {
        @include transform (translateY(-24px));
      }
      100% {
        @include transform (translateY(0));
      }
    
    }
    animation: $anim $dur;
    animation-iteration-count: 2;
  } @else if $anim == spinner and $dur == .5s{
    @keyframes spinner {
      0% {
          opacity: 0.2;
      }
      1% {
          opacity: 0.6;
      }
      2% {
          opacity: 1;
      }
      4% {
          @include transform (rotate(0deg));
      }
      90% {
          opacity: 0.8;
      }
      92% {
          opacity: 0.7;
      }
      95% {
          opacity: 0.5;
      }
      97% {
          opacity: 0.2;
      }
      100% {
          opacity: 0;
          @include transform(rotate(360deg));
      }
    }
      animation: $anim $dur;
      animation-delay: 2.25s;
      animation-fill-mode: both;
      @for $i from 1 through $numItems {
        &--#{$i} {
            animation-delay: $animDelay2 * $i;
        }
    }
   
  }@else if $anim ==  colorIcon and $dur == 2.25s {
    @keyframes colorIcon {
      0%{
       @include color($colorPrimary);
      }
      44%{
        @include color($colorSecondary);
      }
      66%{
        @include color($colorTertiary);
      }
      88%{
        @include color($colorPrimary);
      }
      100%{
        @include color($colorSecondary);
      }
    }
    animation: $anim $dur;
    animation-fill-mode: ease-in-out;
  }@else if $anim == arise and $dur == .6s {
    @keyframes arise {
      0% {
        opacity: 0;
      }
      25% {
          opacity: 0.25;
      }
      50% {
        opacity: 0.5;
      }
      75% {
          opacity: 0.75;
      }
      100% {
        opacity: 1;
      }
    }
    animation: $anim $dur;
    opacity: 1;
    @include transform(scale(1.1));
  } @else if $anim == menuAppear and $dur == 1.75s {
      @keyframes menuAppear {
        0% {
          @include transform (scale(0));
        }
        100% {
          @include transform (scale(1));
        }
    }
    animation: $anim $dur;
    animation-timing-function: cubic-bezier(.5,1.58,.34,.82);
    animation-fill-mode: both;
  }
}




